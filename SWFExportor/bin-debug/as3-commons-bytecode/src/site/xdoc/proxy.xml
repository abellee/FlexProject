<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>Runtime dynamic proxy generation</title>
    <author email="scab@dds.nl">Roland Zwaga</author>
  </properties>

  <body>
  	<section name="Introduction">
  		<p>
			Based on the emit API as3commons-bytecode also offers a proxy API that allows for runtime dynamic proxy generation.<br/>
			Dynamic proxies can offer a basic AOP interception mechanism, a proxy class is nothing more than a subclass of a class whose member invocations need to be intercepted.<br/>
			This subclass is injected with a so-called method invocation interceptor, in as3commons-bytecode this interceptor is described in the <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocationInteceptor.html" target="_blank">IMethodInvocationInteceptor</a></code> interface.<br/>
			Now the constructor or any method or accessor can be overridden in this subclass and its arguments and/or return value can be intercepted and delegated to any number of <code><a href="asdoc/org/as3commons/bytecode/interception/IInterceptor.html" target="_blank">IInterceptor</a></code> instances.<br/>
			So, in practice this would mean something like this, imagine this method:
  		</p>
  		<div class="source"><pre>public function returnMyName():String {
	return "John Doe";
}</pre></div>
		<p>In the dynamic proxy class this method would be overriden like this:</p>
  		<div class="source"><pre>public function returnMyName():String {
	return methodInvocationInterceptor(this, InvocationKind.METHOD, "returnMyName", null, super.returnMyName);
}</pre></div>
		<p>As3commons-bytecode offers a simple implementation of the <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocationInteceptor.html" target="_blank">IMethodInvocationInteceptor</a></code> interface which is injected by default.<br/>
		This implementation is called <code><a href="asdoc/org/as3commons/bytecode/interception/impl/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code> and holds an array of <code><a href="asdoc/org/as3commons/bytecode/interception/IInterceptor.html" target="_blank">IInterceptor</a></code> instances
		which will be invoked each time that the <code>returnMyName()</code> method is invoked.</p>
		<p>To intercept the <code>returnMyName()</code> and change its return value, an <code><a href="asdoc/org/as3commons/bytecode/interception/IInterceptor.html" target="_blank">IInterceptor</a></code> implementation could look like this:</p>
  		<div class="source"><pre>public class MethodInterceptor implements IInterceptor {

	public function TestMethodInterceptor() {
		super();
	}

	public function intercept(invocation:IMethodInvocation):void {
		if (invocation.kind === InvocationKind.METHOD) {
			invocation.proceed = false;
			invocation.returnValue = "Lady Gaga";
		}
	}
}</pre></div>
	<p>The <code><a href="asdoc/org/as3commons/bytecode/interception/impl/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code> wraps all the necessary information in an <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocation.html" target="_blank">IMethodInvocation</a></code> instance and
	passes it on to the <code><a href="asdoc/org/as3commons/bytecode/interception/IInterceptor.html" target="_blank">IInterceptor</a></code>.intercept() method.</p>
	<p>Setting the <code>proceed</code> property on the <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocation.html" target="_blank">IMethodInvocation</a></code> to false will prevent the original method in the proxied class from being invoked, and in this case to be
	replaced by the value returned by this <code><a href="asdoc/org/as3commons/bytecode/interception/IInterceptor.html" target="_blank">IInterceptor</a></code> implementation.</p>
	<p>This example is of course rather pointless, but real-world scenarios that might benefit from this approach include cross-cutting concerns such as logging, security, validation, caching and transactions.</p>
	<p>Interception works on constructors, methods and accessors that have have a public, protected or custom namespace scope. Setting <code>proceed</code> to false while intercepting a constructor will <strong>not</strong> prevent the super constructor from being invoked though. It is, however, of course possible to intercept and change the constructor's arguments.</p>
	<p>Now, this is all nice and sweet, but how does this all come together in practice? In the following sections the various steps for generating proxy classes and injecting interceptors is explained.</p>
  	</section>
  	
	<section name="Sections">
		<ul>
			<li><a href="#Getting_started">Getting started</a></li>
			<li><a href="#Defining_proxies">Defining proxies</a></li>
			<li><a href="#Generating_the_proxy_classes">Generating the proxy classes</a></li>
			<li><a href="#Loading_the_proxy_classes_into_the_AVM">Loading the proxy classes into the AVM</a></li>
			<li><a href="#Instantiating_a_proxy_class">Instantiating a proxy class</a></li>
			<li><a href="#A_practical_example">A practical example</a></li>
			<li><a href="#Introductions">Introductions</a></li>
			<li><a href="#Dynamically_implementing_interfaces">Dynamically implementing interfaces</a></li>
			<li><a href="#Proxying_aliased_classes">Proxying aliased classes</a></li>
		</ul>
	</section>
  	
  	<section name="Getting started">
  		The generation of dynamic proxy classes relies on the bytecode based reflection. This is because, unfortunately, information such as the value of optional arguments is
  		not available through regular reflection but is necessary to correctly create a valid subclass.<br/>
  		<p>So, before using the proxy API be sure to populate the ByteCodeType cache:</p>
  		<div class="source">ByteCodeType.fromLoader(FlexGlobals.topLevelApplication.loaderInfo);</div>
  		<p>For more information on bytecode based reflection visit the <a href="introduction.html">Bytecode reflection</a> section.</p>
  	</section>
  	<section name="Defining proxies">
  		<p>The main entry point for runtime dynamic proxy generation is the <code><a href="asdoc/org/as3commons/bytecode/proxy/IProxyFactory.html" target="_blank">IProxyFactory</a></code> interface.<br/>
  		To make use of this create an instance of the <code><a href="asdoc/org/as3commons/bytecode/proxy/impl/ProxyFactory.html" target="_blank">ProxyFactory</a></code> class:</p>
  		<div class="source"><pre>var proxyFactory:IProxyFactory = new ProxyFactory();</pre></div>
  		<p>Now, to define a proxy for a specified class invoke the defineProxy() method:</p>
  		<div class="source"><pre>var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(MyClass);</pre></div>
  		<p>This method returns an <code><a href="asdoc/org/as3commons/bytecode/proxy/IClassProxyInfo.html" target="_blank">IClassProxyInfo</a></code> instance which allows further definition of the proxy.<br/>
  		Its also possible to ignore the <code><a href="asdoc/org/as3commons/bytecode/proxy/IClassProxyInfo.html" target="_blank">IClassProxyInfo</a></code> instance entirely, in which case every public, protected and custom namespace scoped member on the specified class will be proxied. (Bytecode reflection is used here to obtain the information).</p>
  		<p>Should this not be desirable these methods will define specific members for proxying:</p>
  		<div class="source"><pre>classProxyInfo.proxyMethod("myMethod");</pre></div>
  		<div class="source"><pre>classProxyInfo.proxyAccessor("myAccessor");</pre></div>
  		<p>To have only methods of a certain scope proxied use the <code>proxyMethodScopes</code> property:</p>
  		<div class="source"><pre>classProxyInfo.proxyMethodScopes = ProxyScope.PUBLIC;</pre></div>
  		<p>The same mechanism can be used for accessor scopes:</p>
  		<div class="source"><pre>classProxyInfo.proxyAccessorScopes = ProxyScope.ALL;</pre></div>
  		<p>If only methods or accessors of a certain namespace need to be proxied, use the <code>proxyMethodNamespaces</code> and <code>proxyAccessorNamespaces</code> properties, which both can receive an <code>Array</code> of namespace URIs:</p>
  		<div class="source"><pre>classProxyInfo.proxyMethodNamespaces = ["http://www.mydomain.com/mymethodnamespace"];
classProxyInfo.proxyAccessorNamespaces = ["http://www.mydomain.com/myaccessornamespace"];
</pre></div>
  		<p>If the original class is not dynamic, but its desired to have a dynamic proxy, set the <code>makeDynamic</code> property:</p> 
  		<div class="source"><pre>classProxyInfo.makeDynamic = true;</pre></div>
  		<p>This is the equivalent for setting the <code>dynamic</code> keyword on a class definition:</p>
  		<div class="source"><pre>public dynamic MyClass { /**/ }</pre></div>
  		<p>(Of course, when the original class is already marked as dynamic this will override the <code>makeDynamic</code> value.)</p>
  		<subsection name="Interface proxies">
  			<p>It is possible to create a proxy for an interface as well. In this case a <code>Class</code> that inherits from <code>Object</code> is created that implements the specified interface.</p>
  			<p>This functionality makes the most sense in a mocking scenario.</p>
  		</subsection>
  	</section>
  	
  	<section name="Generating the proxy classes">
  		<p>Once the proxy definitions have been completed it is time to generate the actual classes for those proxies:</p>
  		<div class="source"><pre>var abcBuilder:IAbcBuilder = proxyFactory.generateProxyClasses();</pre></div>
  		<p>The <code>generateProxyClasses()</code> method returns the <code><a href="asdoc/org/as3commons/bytecode/emit/IAbcBuilder.html" target="_blank">IAbcBuilder</a></code> that has been populated by the <code><a href="asdoc/org/as3commons/bytecode/proxy/IProxyFactory.html" target="_blank">IProxyFactory</a></code> enabling
  		further modification and augmentation of the generated classes. Consult the <a href="emit.html" target="_blank">emit documentation</a> for more information on this.</p>
  		<subsection name="Intercepting a class builder">
  		<p>To intercept the creation of a specific proxy class add an event listener for the <code>ProxyFactoryBuildEvent.AFTER_PROXY_BUILD</code> event, the instance of this event
  		contains a reference to the <code><a href="asdoc/org/as3commons/bytecode/emit/IClassBuilder.html" target="_blank">IClassBuilder</a></code> that is used to generate the specified class:</p>
  		<div class="source"><pre>proxyFactory.addEventListener(ProxyFactoryBuildEvent.AFTER_PROXY_BUILD, afterProxyBuilderHandler);

function afterProxyBuilderHandler(event:ProxyFactoryBuildEvent):void {
	var clazz:Class = event.proxiedClass;
	var builder:IClassBuilder = event.classBuilder;
	/* further logic ommited... */
}</pre></div>
		</subsection>
		<subsection name="Intercepting the constructor method body creation">
			<p>The <code>ProxyFactoryBuildEvent.BEFORE_CONSTRUCTOR_BODY_BUILD</code> event enables a developer to completely override the constructor method body creation.<br/>
			Add a listener for the specified event and use the <code>ProxyFactoryBuildEvent.methodBuilder</code> property to modify the <code>ICtorBuilder</code> instance.</p>
			<div class="source"><pre>proxyFactory.addEventListener(ProxyFactoryBuildEvent.BEFORE_CONSTRUCTOR_BODY_BUILD, beforeConstructorBuildHandler);

function beforeConstructorBuildHandler(event:ProxyFactoryBuildEvent):void {
	var builder:ICtorBuilder = event.methodBuilder as ICtorBuilder;
	/* further logic ommited... */
}</pre></div>
		</subsection>
		<subsection name="Intercepting method body creation">
			<p>The <code>ProxyFactoryBuildEvent.BEFORE_METHOD_BODY_BUILD</code> event enables a developer to completely override method body creation.<br/>
			Add a listener for the specified event and use the <code>ProxyFactoryBuildEvent.methodBuilder</code> property to modify the <code>IMethodBuilder</code> instance.</p>
			<div class="source"><pre>proxyFactory.addEventListener(ProxyFactoryBuildEvent.BEFORE_METHOD_BODY_BUILD, beforeMethodBuildHandler);

function beforeMethodBuildHandler(event:ProxyFactoryBuildEvent):void {
	var builder:IMethodBuilder = event.methodBuilder;
	/* further logic ommited... */
}</pre></div>
		</subsection>
		<subsection name="Intercepting accessor body creation">
			<p>The <code>ProxyFactoryBuildEvent.BEFORE_GETTER_BODY_BUILD</code> and <code>ProxyFactoryBuildEvent.BEFORE_SETTER_BODY_BUILD</code> events enable a developer to completely override accessor body creation.<br/>
			Add a listener for the specified events and use the <code>ProxyFactoryBuildEvent.methodBuilder</code> property to modify the <code>IMethodBuilder</code> instance.</p>
			<div class="source"><pre>proxyFactory.addEventListener(ProxyFactoryBuildEvent.BEFORE_GETTER_BODY_BUILD, beforeGetterBuildHandler);

function beforeGetterBuildHandler(event:ProxyFactoryBuildEvent):void {
	var builder:IMethodBuilder = event.methodBuilder;
	/* further logic ommited... */
}</pre></div>
		</subsection>
  	</section>
  	
  	<section name="Loading the proxy classes into the AVM">
  		<p>When the proxy classes have been generated and customized the last step is to load the proxy classes into the AVM.</p>
  		<p>This process is asynchronous so the steps to take are as follows:</p>
  		<div class="source"><pre>proxyFactory.addEventListener(Event.COMPLETE, handleLoaded);
proxyFactory.addEventListener(IOErrorEvent.VERIFY_ERROR, handleVerifyError);
proxyFactory.loadProxyClasses();

function handleLoaded(event:Event):void {
	//classes loaded successfully
}

function handleVerifyError(event:IOErrorEvent):void {
	//something went terribly wrong during class generation...
}</pre></div>
	<p>To load the proxy classes into their own ApplicationDomain, pass the specified domain to the <code>loadProxyClasses()</code>method, by default <code>ApplicationDomain.currentDomain</code> will be used:</p>
	<div class="source"><pre>proxyFactory.loadProxyClasses(new ApplicationDomain(ApplicationDomain.currentDomain));</pre></div>
  	</section>

  	<section name="Instantiating a proxy class">
  		<p>At this moment the <code><a href="asdoc/org/as3commons/bytecode/proxy/IProxyFactory.html" target="_blank">IProxyFactory</a></code> is ready to create proxy instances.</p>
  		<p>An <code><a href="asdoc/org/as3commons/bytecode/proxy/IProxyFactory.html" target="_blank">IProxyFactory</a></code> instance also functions as the classs factory for proxy instances.<br/>
  		To do this invoke the <code>IProxyFactory.createProxy()</code> method like this:</p>
  		<div class="source"><pre>var instance:MyClass = proxyFactory.createProxy(MyClass, ["someVar"]) as MyClass;</pre></div>
  		<p>Now, at this point, by default, the <code><a href="asdoc/org/as3commons/bytecode/proxy/IProxyFactory.html" target="_blank">IProxyFactory</a></code> has created a <code><a href="asdoc/org/as3commons/bytecode/interception/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code> instance and injected
  		it as a constructor argument into the proxy instance.</p>
  		<p>In itself this is pretty useless since no <code><a href="asdoc/org/as3commons/bytecode/interception/IIinterceptor.html" target="_blank">IIinterceptors</a></code> have been registered with the <code><a href="asdoc/org/as3commons/bytecode/interception/impl/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code>.</p>
  		<p>In practice its therefore easier to defer the creation of the <code><a href="asdoc/org/as3commons/bytecode/interception/impl/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code> (or any other <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocationInterceptor.html" target="_blank">IMethodInvocationInterceptor</a></code> instance)
  		to an event handler. This can be achieved by listening for the <code><a href="asdoc/org/as3commons/bytecode/proxy/event/ProxyFactoryEvent.html" target="_blank">ProxyFactoryEvent.GET_METHOD_INVOCATION_INTERCEPTOR</a></code> event:</p>
  		<div class="source"><pre>proxyFactory.addEventListener(ProxyFactoryEvent.GET_METHOD_INVOCATION_INTERCEPTOR, getMethodInterceptor);

function getMethodInterceptor(event:ProxyFactoryEvent):void {
	var interceptor:BasicMethodInvocationInterceptor = new event.methodInvocationInterceptorClass() as BasicMethodInvocationInterceptor;
	interceptor.interceptors[interceptor.interceptors.length] = new MyInterceptor();
	event.methodInvocationInterceptor = interceptor;
}</pre></div>
		<p>Another way to delegate the creation of an <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocationInterceptor.html" target="_blank">IMethodInvocationInterceptor</a></code> is to assign an <code>IFactory</code> instance to the <code>IClassProxyInfo</code> instance returned by the <code>defineProxy()</code> method:</p>
		<div class="source"><pre>var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(MyClass);
classProxyInfo.interceptorFactory = new MyInterceptorFactory();

public class MyInterceptorFactory:IFactory {

	public function MyInterceptorFactory() {
		super();
	}

	public function newInstance():* {
		var interceptor:BasicMethodInvocationInterceptor = new BasicMethodInvocationInterceptor();
		interceptor.interceptors[interceptor.interceptors.length] = new MyInterceptor();
		return interceptor;
	}
}
</pre></div>
  	</section>
  	
	<section name="A practical example">
		<p>Lastly, to create a better picture, here is a complete example of the practical use of a proxy.</p>
		<p>First of all, let's take this class, an object containing some kind of business logic:</p>
		<div class="source"><pre>public class MyBusinessObject {
	
	public function MyBusinessObject() {
		super();
	}
	
	public function calculateTotalPrice(order:Order):Number {
		/** actual logic ommitted **/
	}
}</pre></div>
	<p>Now imagine that the instantiation of this class and invocation of the calculateTotalPrice() method needs to be traced.</p>
	<p>Its possible to write a simple <code><a href="asdoc/org/as3commons/bytecode/interception/IIinterceptor.html" target="_blank">IIinterceptor</a></code> implementation that does this:</p>
	<div class="source"><pre>public class TracingInterceptor implements IInterceptor {
	
	public function TracingInterceptor() {
		super();
	}
	
	public function intercept(invocation:IMethodInvocation):void {
		switch(invocation.kind){
			case InvocationKind.CONSTRUCTOR:
				trace("{0} was instantiated", invocation.targetInstance);
				break;
			case InvocationKind.METHOD:
				trace("{0} was invoked with parameter {0}", invocation.targetMember, invocation.arguments[0]);
				break;
		}
	}
}</pre></div>
	<p>Now this code remains to wire everything together:</p>
	<div class="source"><pre>var proxyFactory:IProxyFactory = new ProxyFactory();
//Note: we don't use the IClassProxyInfo instance returned by the defineProxy method
//since we want all members (one method in this case) to be proxied:
proxyFactory.defineProxy(TracingInterceptor, BasicMethodInvocationInterceptor);
proxyFactory.generateProxyClasses();
proxyFactory.addEventListener(Event.COMPLETE, proxiesLoadedHandler);
proxyFactory.loadProxyClasses();

function proxiesLoadedHandler(event:Event):void {
	var proxyFactory:IProxyFactory = (event.target as IProxyFactory);
	proxyFactory.addEventListener(ProxyFactoryEvent.GET_METHOD_INVOCATION_INTERCEPTOR, createMethodInterceptor);
	var myBusinessObj:MyBusinessObject = proxyFactory.createProxy(MyBusinessObject) as MyBusinessObject;
	//This will yield a trace something like this: 'Sun Dec 26 17:43:19 GMT+0100 2010 DEBUG - MyBusinessObject was instantiated'
	myBusinessObj.calculateTotalPrice(new Order());
	//And this will yield a trace like this: 'Sun Dec 26 17:43:19 GMT+0100 2010 DEBUG - calculateOrderPrice was invoked with parameter Order'
}

function createMethodInterceptor(event:ProxyFactoryEvent):void {
	var interceptor:BasicMethodInvocationInterceptor = new event.methodInvocationInterceptorClass() as BasicMethodInvocationInterceptor;
	interceptor.interceptors[interceptor.interceptors.length] = new TracingInterceptor();
	event.methodInvocationInterceptor = interceptor;
}</pre></div>
	<p>Now, let's imagine a second <code><a href="asdoc/org/as3commons/bytecode/interception/IIinterceptor.html" target="_blank">IIinterceptor</a></code> implementation that wil calculate a certain reduction to the calculated price:</p>
	<div class="source"><pre>public class ReductionInterceptor implements IInterceptor {

	public function ReductionInterceptor() {
		super();
	}

	public function intercept(invocation:IMethodInvocation):void {
		if (invocation.kind === InvocationKind.METHOD) {
			//first let the original method calculate the order price:
			var price:Number = invocation.targetMethod.apply(invocation.targetInstance, invocation.arguments);
			//Now let's give a 10% reduction:
			price -= ((price / 100) * 10);
			//Set proceed to false to prevent the original method from being invoked again
			invocation.proceed = false;
			//And set the altered price as the return Value:
			invocation.returnValue = price;
		}
	}
}</pre></div>
	<p>Now add the interceptor to the <code><a href="asdoc/org/as3commons/bytecode/interception/impl/BasicMethodInvocationInterceptor.html" target="_blank">BasicMethodInvocationInterceptor</a></code>:</p>
	<div class="source"><pre>function createMethodInterceptor(event:ProxyFactoryEvent):void {
	var interceptor:BasicMethodInvocationInterceptor = new event.methodInvocationInterceptorClass() as BasicMethodInvocationInterceptor;
	interceptor.interceptors[interceptor.interceptors.length] = new TracingInterceptor();
	interceptor.interceptors[interceptor.interceptors.length] = new ReductionInterceptor();
	event.methodInvocationInterceptor = interceptor;
}</pre></div>
	<subsection name="Introductions">
		<p>The last, and potentially most powerful, feature is called 'introductions', an AOP term. People might recognize this as 'Partial Classes' or 'Mixins' as well.</p>
		<p>What this feature offers is the ability to merge an existing class into a generated proxy class, adding its behavior to the resulting class.</p>
		<p>These introduced classes have a few limitations though:</p>
		<ul>
			<li>They cannot have any constructor arguments.</li>
			<li>They can only inherit from the <code>Object</code> class.</li>
		</ul>
		<blockquote>
			<strong>ATTENTION: Currently there are still some issues introducing methods, it is therefore adviced *not* too use try/catch blocks in introduced
			classes. Failing to do so results in verification errors in release builds of the code. The AS3Commons team hopes to have these issues resolved as soon as possible.</strong>
		</blockquote>
		<p>Let's take an actual example to illustrate just how this could work in the real world:</p>
		<p>Let's take this ordinary boring value object:</p>
		<div class="source"><pre>public class Order {
	private var _id:int;
	public function get id():int {
		return _id;
	}
	public function set id(value:int):void {
		_id = value;
	}
	
	private var _date:Date;
	public function get date():Date {
		return _date;
	}
	public function set date(value:Date):void {
		_date = value;
	}

	private var _price:Number;
	public function get price():Number {
		return price;
	}
	public function set price(value:Number):void {
		_price = value;
	}
}</pre></div>
	<p>Now suppose we'd like to keep track of the changes to this object by adding a <code>isDirty</code> property, which
	is supposed to return <code>true</code> if a property has been changed.</p>
	<p>One problem, we don't have access to the source of the object. This is where a dynamic proxy could help out:</p>
	<p>First there is the <code>IChangeTrackable</code> interface:</p>
	<div class="source"><pre>public interface IChangeTrackable {
	function get isDirty():Boolean;
	function set isDirty(value:Boolean):void;
}</pre></div>
	<p>And the most basic implementation of this interface:</p>
	<div class="source"><pre>public class PartialChangeTracker implements IChangeTrackable {
	private var _isDirty:Boolean;
	public function get isDirty():Boolean {
		return _isDirty;
	}
	public function set isDirty(value:Boolean):void {
		_isDirty = value;
	}
}</pre></div>
	<p>That's all that's needed, now the proxy can be defined with an introduction:</p>
	<div class="source"><pre>var proxyFactory:IProxyFactory = new ProxyFactory();
var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(Order);
classProxyInfo.introduce(PartialChangeTracker);
proxyFactory.generateProxyClasses();
proxyFactory.loadProxyClasses();
</pre></div>
	<p>And that's it, if afterwards the proxy is instantiated, the instance can actually be cast to <code>IChangeTrackable</code>:</p>
	<div class="source"><pre>var order:Order = proxyFactory.createProxy(Order) as Order;
var dirty:Boolean = IChangeTrackable(order).isDirty;
//dirty == false
</pre></div>
	<p>To update the <code>isDirty</code> property an <code>IInterceptor</code> implementation is needed, this could look like this:</p>
	<div class="source"><pre>public class DirtyUpdateInterceptor implements IInterceptor {
	
	public function DirtyUpdateInterceptor() {
		super();
	}
	
	public function intercept(invocation:IMethodInvocation):void {
		if (invocation.kind === MethodInvocationKind.SETTER) {
			if (invocation.arguments[0] != invocation.instance[invocation.targetMember]) {
				invocation.instance.isDirty = true;
			}
		}
	}
}</pre></div>
	<p>And that's it, adding this <code>IInterceptor</code> to the <code>IMethodInvocationInterceptor</code> that's been injected into the proxy
	will make the <code>Order</code> instance's changes trackable.</p>
	</subsection>
	<subsection name="Another introduction example">
		<p>Here's an example that illustrates how to augment an <code>IEventDispatcher</code> implementation with an interface that offers
		several enhancement methods.</p>
		<p>Let's define the interface first:</p>
		<div class="source"><pre>public interface IEventDispatcherEx {
	function removeAll():void;
	function removeListeners(eventType:String):void;
	function getCountListeners(eventType:String=null):uint;
	function getListeners(eventType:String=null):Array;
}</pre></div>
	<p>The implementation can look like this:</p>
	<div class="source"><pre>public class EventDispatcherExImpl implements IEventDispatcherEx {
	
	as3commons_bytecode var listenersLookup:Dictionary = new Dictionary();
	
	public function EventDispatcherExImpl() {
		super();
	}
	
	public function removeAll():void {
		for each(var type:String in listenersLookup) {
			var listeners:Array = this.as3commons_bytecode::listenersLookup[type] as Array;
			for each(var func:Function in listeners) {
				this['removeEventListener'](type, func);
			}
		}
	}
	
	public function removeListeners(eventType:String):void {
		var listeners:Array = this.as3commons_bytecode::listenersLookup[eventType] as Array;
		if (listeners != null) {
			for each(var func:Function in listeners) {
				this['removeEventListener'](eventType, func);
			}
		}
	}
	
	public function getCountListeners(eventType:String=null):uint {
		var result:uint = 0;
		if (eventType == null){
			for each(var type:String in listenersLookup) {
				var listeners:Array = this.as3commons_bytecode::listenersLookup[type] as Array;
				result += listeners.length;
			}
		} else {
			var listeners:Array = this.as3commons_bytecode::listenersLookup[eventType] as Array;
			if (listeners != null) {
				result += listeners.length;
			}
		}
		return result;
	}
	
	public function getListeners(eventType:String=null):Array {
		return this.as3commons_bytecode::listenersLookup[type] as Array;
	}
}</pre></div>
	<p>Note that the <code>listenersLookup</code> member is scoped to the as3commons_bytecode namespace. This is on purpose because this class is meant to be merged into another
	class, scoping its members to a namespace reduces the risks of duplicate members in the generated class.</p>
	<p>Now the class is ready to be introduced (merged) into a proxy class, let's suppose there is an <code>IEventDispatcher</code> implementation called <code>MyEventDispatcher</code>:</p>
	<div class="source"><pre>var proxyfactory:IProxyFactory = new ProxyFactory();
var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(MyEventDispatcher);
classProxyInfo.introduce(EventDispatcherExImpl);
classProxyInfo.proxyMethod("addEventListener");
classProxyInfo.proxyMethod("removeEventListener");
proxyFactory.generateProxyClasses();
proxyFactory.loadProxyClasses();
</pre></div>
	<p>Of course the mechanism to tie the introduced clas together with the proxy is done using an <code>IInterceptor</code>:</p>
	<div class="source"><pre>public class EventDispatcherExInterceptor implements IInterceptor {
	
	public function EventDispatcherExInterceptor() {
		super();
	}
	
	public function intercept(invocation:IMethodInvocation):void {
		if (invocation.kind === InvocationKind.METHOD) {
			switch (invocation.targetMember.localName) {
				case 'addEventListener':
					interceptAddEventListener(invocation);
					break;
				case 'removeEventListener':
					interceptRemoveEventListener(invocation);
					break;
				default:
					break;
			}
		}
	}
	
	public function interceptAddEventListener(invocation:IMethodInvocation):void {
		var eventType:String = String(invocation.arguments[0]);
		if (invocation.targetInstance.as3commons_bytecode::listenersLookup[eventType] == null) {
			invocation.targetInstance.as3commons_bytecode::listenersLookup[eventType] = [];
		}
		var arr:Array = invocation.targetInstance.as3commons_bytecode::listenersLookup[eventType];
		arr[arr.length] = invocation.arguments[1];
	}

	public function interceptRemoveEventListener(invocation:IMethodInvocation):void {
		var eventType:String = String(invocation.arguments[0]);
		if (invocation.targetInstance.as3commons_bytecode::listenersLookup[eventType] != null) {
			var arr:Array = invocation.targetInstance.as3commons_bytecode::listenersLookup[eventType];
			var idx:int = arr.indexOf(eventType);
			arr.splice(idx, 1);
		}
		arr[arr.length] = invocation.arguments[1];
	}

}</pre></div>
	<p>This is not a perfect implementation of such a mechanism, since the <code>EventDispatcherExImpl</code> doesn't take into account weak referenced event listeners or if the capture phase is used or not,
	but this example is not meant to showcase a perfect implementation, merely a pattern.</p>
	<p>All of this could, of course, be solved in most cases by having the necessary classes inherit from a base class, but this is not always possible to achieve, in these cases
	a dynamic proxy might offer a better solution.</p>
	</subsection>
	<subsection name="Dynamically implementing interfaces">
		<p>A second, and perhaps more convenient, way to add interfaces to a proxy is by dynamically implementing them and letting the susual interceptor mechanism handle its implementation.</p>
		<p>Getting this to work is fairly easy, use the <code>implementedInterface()</code> method on the <code>IClassProxyInfo</code> and pass into it an interface class:</p>
		<div class="source"><pre>var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(MyClass);
classProxyInfo.implementInterface(IEventDispatcherEx);
</pre></div>
		<p>The <code>ProxyFactory</code> afterwards will make sure that all the members of the specified interface are dynamically added to the proxy class.</p>
		<p>Finally, the usual interception mechanism can be applied to provide the actual implementation of the interface methods.</p>
	</subsection>
	<subsection name="Proxying aliased classes">
		<p>There might be scenario's one can think of where proxying a value object returned from a webserver can add an extra benefit.</p>
		<p>In this section it is explained how this can be achieved.</p>
		<p>First, let's imagine the value objects, probably looking something like this:</p>
		<div class="source"><pre>[RemoteClass("com.myclasses.vo.MyValueObject")]
public class MyValueObject {
	private var _name:String;
	private var _width:Number;
	private var _height:Number;

	public function get name():String {
		return _name;
	}
	public function set name(value:String):void {
		_name = value;
	}

	public function get width():Number {
		return _width;
	}
	public function set width(value:Number):void; {
		_width = value;
	}

	public function get height():Number {
		return _height;
	}
	public function set height(value:Number):void {
		_height = value;
	}
}
</pre></div>
	<p>Now suppose every value object would need an instantiation timestamp, as defined in this following interface and implemented in the specified class:</p>
	<div class="source"><pre>public interface ITimeStampable {
	function get timestamp():Date;
}

public class PartialTimeStampable implements ITimeStampable {
	private var _timestamp:Date = new Date();
	
	[Transient]
	public function get timestamp():Date {
		return _timestamp;
	}
}
</pre></div>
	<p>All that remains is figuring out which classes ought to be proxied and their class aliases overriden:</p>
	<div class="source"><pre>var classNames:Array = ByteCodeType.fromLoader(Application.loaderInfo);
var classNames:Array = ByteCodeType.getClassesWithMetadata('RemoteClass');
var proxyFactory:IProxyfactory = new ProxyFactory();
for each(var className:String in classNames) {
	var classProxyInfo:IClassProxyInfo = proxyFactory.defineProxy(ApplicationDomain.currentDomain.getDefinition(className) as Class);
	classProxyInfo.proxyMethodScopes = ProxyScope.NONE;
	classProxyInfo.proxyAccessorScopes = ProxyScope.NONE;
	classProxyInfo.introduce(PartialTimeStampable);
}
proxyFactory.addEventListener(Event.COMPLETE, proxiesLoadedHandler);
proxyFactory.generateProxyClasses();
proxyFactory.loadProxyClasses();

function proxiesLoadedHandler(event:Complete):void {
	var classNames:Array = ByteCodeType.getClassesWithMetadata('RemoteClass');
	for each(var className:String in classNames) {
		var clazz:Class = ApplicationDomain.currentDomain.getDefinition(className) as Class;
		var proxyInfo:ProxyInfo = proxyFactory.getProxyInfoForClass(clazz);
		var type:Type = Type.forClass(clazz);
		var classAlias:String = Metadata(type.getMetadata('RemoteClass')[0]).getArgument('alias').value;
		registerClassAlias(classAlias, proxyInfo.proxyClass);
	}
}
</pre></div>
	<p>And that's it, any objects coming from the remote server that are associated with the specified alias will
	be deserialized to the proxy value objects containing the new <code>timestamp</code> property that initializes to the current date.</p>
	</subsection>
	<subsection name="What is the purpose of all this?">
		<p>The proxy API in as3commons-bytecode isn't meant as a complete end solution for all proxying needs. Instead it only offers the basic building blocks
		on top of which a more elaborate proxying system can be built. Its target audience includes framework developers in that respect.</p>
		<p>The AS3Commons team encourages developers to write their own <code><a href="asdoc/org/as3commons/bytecode/interception/IMethodInvocationInterceptor.html" target="_blank">IMethodInvocationInterceptor</a></code> implementations and perhaps hook the proxying system
		into an IoC container or any other type of application framework.</p>
	</subsection>
	</section>

  </body>
</document>