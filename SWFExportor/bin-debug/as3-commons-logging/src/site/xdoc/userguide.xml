<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Introduction to as3commons-logging 2.6</title>
		<author email="mh@leichtgewicht.at">Martin Heidegger</author>
	</properties>
	<body>

		<section name="Usage">
			
			<p>
				The use of as3commons-logging is simple and straightforward, when in
				need of a logger use the <a href="asdoc/org/as3commons/logging/package.html#getLogger()">getLogger()</a>
				function to get one
				<pre class="source">import <a href="asdoc/org/as3commons/logging/package.html#getLogger()">org.as3commons.logging.api.getLogger</a>;

<a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>("myLogger").<a href="ons.logging.api.ILogger.html#info()">info</a>("Some logging message");</pre>
			</p>
			
			<p>
				The loggers do not need to follow any pattern but they can follow
				one passing a class to the logger
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>(MyClass).<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("Some logging message");</pre>
				Now the loggers always show the passed-in class name. This leads
				to a very common and reasonable pattern of having one logger per
				class.<br/>
				<br/>
				A common class could look straightforward like this:
				<pre class="source">package {
    import <a href="asdoc/org/as3commons/logging/api/ILogger.html">org.as3commons.logging.api.ILogger</a>;
    import <a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">org.as3commons.logging.api.getLogger</a>;

    class MyClass {
        private static const logger: <a href="asdoc/org/as3commons/logging/api/ILogger.html">ILogger</a> = <a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>( MyClass );

        public function foo() {
            logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("Some logging message");
        }
    }
}</pre>
			</p>
			
			<p>
				Since we disabled (since v2.5) logging by default, as any reasonable logging framework does,
				you need to enable it first to see something. 
			</p>
			<pre class="source">package {
    import flash.display.Sprite;
    import <a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">org.as3commons.logging.api.LOGGER_FACTORY</a>;
    
    class MyClass extends Sprite {
        public function MyClass() {
            <a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.setup = new <a href="asdoc/org/as3commons/logging/setup/SimpleTargetSetup.html">SimpleTargetSetup</a>( new <a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html">TraceTarget</a> );
        }
    }	
}</pre>
			
			<p>
				The loggers have 5 methods to log output to, each referring to the
				relevance of the statement.
				
				<pre class="source">
logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#debug()">debug</a>("..."); // To help in the debugging process of your code.
logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("...");  // Let the users of your code know what is going on.
logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#warn()">warn</a>("...");  // Warn if some code doesn't run efficiently or could run better.
logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#error()">error</a>("..."); // Warn that a error occurred that your code <b>could</b> deal with.
logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#fatal()">fatal</a>("..."); // Scream for help if a error occurs that you could not deal with but somehow found out about.
</pre>
				By using them wisely you can improve the quality of your output.
			</p>
			
			<p>
				Any message sent may use parameters to inform about objects/content
				related to the code:
				
				<pre class="source">logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("parameter {0} refers to {1}", ["P0", "P1"]);
// output 'parameter P0 refers to P1'</pre>
				
				This may be particularly useful if you use a good log output
				that also allows to look deeper into the parameters. If you have
				simple outputs it will just stringify the statement.
			</p>
			
			<p>
				When you are working more with logging in your application you might
				over time even develop more complex log statements which require
				some processing. In case you run into statements that do more than
				just passing parameters then it might be reasonable to check if
				the certain method is enabled or not.
				
				<pre class="source">if( logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#infoEnabled">infoEnabled</a> ) {
    logger.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>( complexLogStatement() );
}</pre>
				This way the <code>complexLogStatement()</code> is just called
				when really needed. 
			</p>
			
			<p>
				For a team of users one might want to have loggers per user that
				sends out the log statement. Since various loggers allow to show
				them as3commons-logging also offers support to use that.
				<pre class="source">package {
    import <a href="asdoc/org/as3commons/logging/api/ILogger.html">org.as3commons.logging.api.ILogger</a>;
    import <a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">org.as3commons.logging.api.getLogger</a>;
    
    
    class MyClass {
        public static const mLog: <a href="asdoc/org/as3commons/logging/api/ILogger.html">ILogger</a> = <a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>( MyClass, "Martin Heidegger");
        public static const cLog: <a href="asdoc/org/as3commons/logging/api/ILogger.html">ILogger</a> = <a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>( MyClass, "Christophe Herreman");

        public function foo() {
            mLog.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("Some logging message by Martin");
            cLog.<a href="asdoc/org/as3commons/logging/api/ILogger.html#info()">info</a>("Some logging message by Christophe");
        }
    }
}</pre>
				With this it is also possible to later on filter to the statements of users.
			</p>
			
			<p>
				Since Flash Player 10.2 it is possible to listen to the global error
				event dispatcher. With version 2.1 as3commons-logging introduced a util
				to capture that errors and redirect it as fatal log statements.
				<pre>package {
    import flash.display.Sprite;
    import <a href="asdoc/org/as3commons/logging/util/package.html#captureUncaughtErrors()">org.as3commons.logging.util.captureUncaughtErrors</a>;
    
    public class MyApplication extends Sprite {
        public function MyApplication() {
            captureUncaughtErrors(loaderInfo);
        }
    } 
}</pre>
			</p>
		</section>
		<section name="Setup">
			<p>
				By default all the log statements will be hidden.<br/>
				<br/>
				To change that you need to change the setup of <a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>
				which (in fact) manages all the loggers retrieved via <code><a href="asdoc/org/as3commons/logging/api/package.html#getLogger()">getLogger</a>()</code>.<br/>
				You can change the setup of the loggers whenever you like, even though
				its recommended to do it at the startup of your application.
			</p>
			<p>
				For just changing the target of all loggers the <a href="asdoc/org/as3commons/logging/setup/SimpleTargetSetup.html">SimpleTargetSetup</a>
				can be used.
				
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = new <a href="asdoc/org/as3commons/logging/setup/SimpleTargetSetup.html">SimpleTargetSetup</a>( new <a href="asdoc/org/as3commons/logging/setup/target/TextFieldTarget.html">TextFieldTarget</a> );</pre>
				
				That would redirect all log statements to the <code>TextFieldTarget</code>.<br/>
				A list of all targets that are available by default can be found in the
				<a href="asdoc/org/as3commons/logging/setup/target/package-detail.html">API docs for the <code>org.as3commons.logging.setup.target</code> package</a>
			</p>
			<p>
				To cancel all output again you can simply use a <code>null</code> setup.
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = null;</pre>
			</p>
			<p>
				More complex setups are separated in the concepts of <a href="asdoc/org/as3commons/logging/api/ILogSetup.html">ILogSetup</a>
				and <a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a>.
				A <code>ILogSetup</code> defines which <code>ILogTarget</code>s are
				given to the levels of each <code>ILogger</code> returned by the system.
			</p>
			<p>
				As mentioned before the default target to render statements is the
				<a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html">TraceTarget</a>.<br/>
				<br/>
				The <code>TraceTarget</code> will render the statements, by default
				in the format of
				<pre>    "{time} {logLevel} - {shortName} - {message}"</pre>
				resulting in statements like
				<pre>    "12:43:50.493 DEBUG - MyClass - Hello World"</pre>
				This can be easily changed by using the <code>format</code> property.
				<pre class="source">(new <a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html">TraceTarget</a>).format = "{name} {time} {gmt} [{logLevel}] {message}";
// Results in statements like "mypackage.MyClass 12:43:50.493 GMT+0900 [DEBUG] Hello World"</pre>
				All implementations of <a href="asdoc/org/as3commons/logging/setup/target/IFormattingLogTarget.html">IFormattingLogTarget</a>
				can be changed the same way. A list of all formatting available can
				be found in the <a href="asdoc/org/as3commons/logging/setup/target/IFormattingLogTarget.html#format">API</a>.<br/>
			</p>
			<p>
				To limit loggers to just enable certain levels you can use the
				<a href="asdoc/org/as3commons/logging/setup/LevelTargetSetup.html">LevelTargetSetup</a>.
				<br/>
				This example just enables the <code>error()</code> and <code>fatal()</code> methods:
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = new <a href="asdoc/org/as3commons/logging/setup/LevelTargetSetup.html">LevelTargetSetup</a>( new <a href="asdoc/org/as3commons/logging/setup/target/TextFieldTarget.html">TextFieldTarget</a>, <a href="asdoc/org/as3commons/logging/setup/LogSetupLevel.html">LogSetupLevel</a>.<a href="asdoc/org/as3commons/logging/setup/LogSetupLevel.html#ERROR">ERROR</a> );</pre>
			</p>
			<p>
				If you want to have many targets rendering the same statements you can use 
				<a href="asdoc/org/as3commons/logging/setup/target/package.html#mergeTargets()">mergeTargets()</a>.
				It will merge two or more targets into one new target. 
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = new <a href="asdoc/org/as3commons/logging/setup/SimpleTargetSetup.html">SimpleTargetSetup</a>( <a href="asdoc/org/as3commons/logging/setup/target/package.html#mergeTargets()">mergeTargets</a>( new <a href="asdoc/org/as3commons/logging/setup/target/TextFieldTarget.html">TextFieldTarget</a>, new <a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html">TraceTarget</a> ) );</pre>
			</p>
			<p>
				To just render some loggers and exclude others the  
				<a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html">RegExpSetup</a>
				offers a simple, straight forward way.<br/>
				By adding a statement with <code>addTargetRule()</code> its possible to define
				targets to certain loggers: 
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = new <a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html">RexExpSetup</a>().<a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html#addTargetRule()">addTargetRule</a>( /^org\.as3commons\./, new <a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html">TraceTarget</a> );</pre>
				This might for example just <code>trace()</code> the output of all loggers that start
				with "<code>org.as3commons.</code>".<br/>
				<br/>
				Any further added statement will be added to the checklist:
				<pre class="source"><a href="asdoc/org/as3commons/logging/api/package.html#LOGGER_FACTORY">LOGGER_FACTORY</a>.<a href="asdoc/org/as3commons/logging/LoggerFactory.html#setup()">setup</a> = new <a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html">RexExpSetup</a>()
                              .<a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html#addTargetRule()">addTargetRule</a>( /^org\.as3commons\./, <a href="asdoc/org/as3commons/logging/setup/target/TraceTarget.html"></a> )
                              .<a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html#addTargetRule()">addTargetRule</a>( /^com\.mycompany\./, new <a href="asdoc/org/as3commons/logging/setup/target/TextFieldTarget.html">TextFieldTarget</a>, <a href="asdoc/org/as3commons/logging/setup/LogSetupLevel.html">LogSetupLevel</a>.<a href="asdoc/org/as3commons/logging/setup/LogSetupLevel.html#ERROR">ERROR</a> )
                              .<a href="asdoc/org/as3commons/logging/setup/RegExpSetup.html#addTargetRule()">addTargetRule</a>( /^com\.mycompany\.hideThisPackage\./, null );</pre> 
			</p>
		</section>
		<section name="Custom targets and Loggers">
			<p>
				To have your own, custom, targets all you have to do is implementing
				<a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a>.
			</p>
			<p>
				Fortunately that is pretty fast done by just implementing one method.
				Here is what a very, very simple target could look like:
				<pre class="source">package {
    import <a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">org.as3commons.logging.api.ILogTarget</a>;
    import <a href="asdoc/org/as3commons/logging/util/LogMessageFormatter.html">org.as3commons.logging.util.LogMessageFormatter</a>;
    
    public final class VerySimpleTraceTarget implements <a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a> {
        
        private const _formatter: <a href="asdoc/org/as3commons/logging/util/LogMessageFormatter.html">LogMessageFormatter</a>
            = new <a href="asdoc/org/as3commons/logging/util/LogMessageFormatter.html">LogMessageFormatter</a>("{logTime} {logLevel} {name} {message}");
        
        public function log(name:String, shortName:String, level:int, timeStamp:Number,
                            message:*, parameters:Array, person:String):void {
            trace( _formatter.<a href="asdoc/org/as3commons/logging/util/LogMessageFormatter.html#format()">format</a>(
                                  name, shortName, level, timeStamp,
                                  message, parameters, person)
            );
        }
    }
}</pre>
				Note that the level passed in to the target is of type <code>int</code>
				and <b>not</b> of the type <code>"LogSetupLevel"</code>.<br/>
				<br/>Any target may be used in the setup process as outlined earlier.
			</p>
			<p>
				Developing a custom <a href="asdoc/org/as3commons/logging/api/ILogSetup.html">ILogSetup</a>
				is not much more diffcult. All your custom setup has to do is
				to manipulate the given <a href="asdoc/org/as3commons/logging/Logger.html">Logger</a>
				(!not <code>ILogger</code>) by filling the desired 
				<a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a>s 
				to each desired port.
			</p>
			<p>
				A setup that just fills the error ports could look like this: <pre class="source">package {
    import <a href="asdoc/org/as3commons/logging/api/ILogSetup.html">org.as3commons.logging.api.ILogTarget</a>;
    import <a href="asdoc/org/as3commons/logging/Logger.html">org.as3commons.logging.Logger</a>;
    
    public final class JustErrorSetup implements <a href="asdoc/org/as3commons/logging/api/ILogSetup.html">ILogSetup</a> {
        
        private var _target: <a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a>;
        
        public function JustErrorSetup( target:<a href="asdoc/org/as3commons/logging/setup/ILogTarget.html">ILogTarget</a> ) {
            _target = target;
        }
        
        function applyTo(logger:<a href="asdoc/org/as3commons/logging/Logger.html">Logger</a>):void {
            logger.errorTarget = _target;
        }
    }
}</pre>			And ... Done!
			</p>
			<p>
				If you implement a target or even a whole setup process, let us know:
				We will be happy to feature it.
			</p>
		</section>

	</body>
</document>

